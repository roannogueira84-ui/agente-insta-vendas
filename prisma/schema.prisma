// ========================================
// Prisma Schema
// Banco: PostgreSQL (Neon) via DATABASE_URL
// ========================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MODELOS DE AUTENTICAÇÃO (NextAuth)
// ========================================
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?

  // Relações do app
  products  Product[]
  orders    Order[]
  // Configuração de meio de pagamento (1-para-1)
  paymentConfig PaymentConfig?

  // NextAuth
  accounts  Account[]
  sessions  Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========================================
// MODELOS DE NEGÓCIO
// ========================================
model Product {
  id          String   @id @default(cuid())

  // relação com usuário (DONO do produto)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?

  // Use "image" no código. Deixo imageUrl opcional
  // para compatibilizar com código antigo, se existir.
  image       String?
  imageUrl    String?

  // Relacionamentos derivados
  paymentLinks PaymentLink[]
  orderItems   OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentLink {
  id        String   @id @default(cuid())

  // dono do link (usuário)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // produto ao qual o link pertence
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  url       String
  isActive  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
}

model PaymentConfig {
  // 1 registro por usuário
  userId    String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ex.: "mercadopago", "pagseguro"
  provider  String?
  apiKey    String?
  publicKey String?
  secretKey String?

  isActive  Boolean  @default(false)
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(cuid())

  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // opcionalmente associada a um PaymentLink
  paymentLinkId String?
  paymentLink   PaymentLink? @relation(fields: [paymentLinkId], references: [id])

  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)

  items         OrderItem[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
}

// ========================================
// ENUMS
// ========================================
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}
