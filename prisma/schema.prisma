// ---------- PRISMA BASE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- MODELOS NEXT-AUTH (opcional, se você usar login social depois) ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// ---------- USUÁRIOS ----------
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String?
  password  String?  // senha temporária enviada por e-mail
  isActive  Boolean  @default(true)
  role      String   @default("USER") // USER | ADMIN
  createdAt DateTime @default(now())

  accounts  Account[]
  sessions  Session[]
  products  Product[]
  orders    Order[]
  configs   PaymentConfig[]
  links     PaymentLink[]

  @@map("users")
}

// ---------- PRODUTOS ----------
model Product {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  price       Decimal  @db.Decimal(10,2)
  stock       Int      @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       PaymentLink[]
  orderItems  OrderItem[]

  @@map("products")
}

// ---------- CONFIG. DE PAGAMENTO (por cliente) ----------
enum Provider {
  PAGSEGURO
  MERCADOPAGO
}

model PaymentConfig {
  id          String   @id @default(cuid())
  userId      String
  provider    Provider
  email       String?
  token       String?
  publicKey   String?
  sandboxMode Boolean  @default(true)
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider], name: "userId_provider")
  @@map("payment_configs")
}

// ---------- LINKS DE PAGAMENTO (por produto) ----------
model PaymentLink {
  id        String   @id @default(cuid())
  userId    String
  productId String
  linkUrl   String
  linkId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("payment_links")
}

// ---------- PEDIDOS ----------
enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

model Order {
  id            String      @id @default(cuid())
  userId        String?
  customerEmail String?
  customerName  String?
  total         Decimal     @db.Decimal(10,2)
  status        OrderStatus @default(PENDING)
  provider      String?
  paymentId     String?     @unique
  metadata      Json?
  createdAt     DateTime    @default(now())

  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  items        OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10,2)

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// ---------- LOG DE WEBHOOKS ----------
model WebhookLog {
  id        String   @id @default(cuid())
  provider  String
  payload   Json
  createdAt DateTime @default(now())

  @@map("webhook_logs")
}
